library(foreign) # for reading spss formatted data
install.packages("foreign")
install.packages("foreign")
install.packages("foreign")
install.packages("foreign")
library(foreign)# for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
View(d)
head(d)
unique(d$Exper)
colnames(d)
hist(d$Game1Angry1)
unique(d$Game1Angry1)
range(d$Game1Angry1)
missing_values <- sum(is.na(d$Game1Angry1))
is.na(d$Game1Angry1))
is.na(d$Game1Angry1)
hist(d$Game1Angry1)
unique(d$Game1Angry1)
View(d)
chooseCRANmirror()
install.packages("foreign", dependencies = TRUE)
install.packages("foreign", dependencies = TRUE)
tail(d)
View(d)
View(d)
?unique
unique(d$DoNotUse)
is.na(d$DoNotUse)
filtered_d = d %>%
filter(is.na ==T) # your code here: exclude subjects that are marked as "DoNotUse"
library(foreign)# for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
filtered_d = d %>%
filter(is.na ==T) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(,is.na ==T) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(is.na ==T) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(.,is.na ==T) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(.,!=1) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(!=1) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(DoNotUse !=1) # your code here: exclude subjects that are marked as "DoNotUse"
View(filtered_d)
View(d)
head(d$DoNotUse)
print(d$DoNotUse)
filtered_d = d %>%
filter(DoNotUse == NA) # your code here: exclude subjects that are marked as "DoNotUse"
?is.na
filtered_d = d %>%
filter(DoNotUse == "NA") # your code here: exclude subjects that are marked as "DoNotUse"
View(filtered_d)
View(d)
View(d)
filtered_d = d %>%
filter(is.na(DoNotUse)|DoNotUse != 1) # your code here: exclude subjects that are marked as "DoNotUse"
View(filtered_d)
print(filtered_d$DoNotUse)
library(remotes)
remotes::install_github("langcog/experimentology-package")
install.packages("shiny")
library(ggplot2)
?pch()
install.packages("ggthemes")
fvs <- read_csv("/Users/ciddecatur/Desktop/problem_sets/data/FVS2011-hands.csv")
fvs <- read.csv("/Users/ciddecatur/Desktop/problem_sets/data/FVS2011-hands.csv")
View(fvs)
library(ggplot2)
library(dplyr)
unique_data <- fvs
unique_data %>%
group_by(id) %>%
slice(1)
View(unique_data)
unique_data %>%
group_by(subid) %>%
slice(1)
ggplot(unique_data, aes(x = age)) =
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Participant Age", x = "Age", y= "number of participants")
ggplot(unique_data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Histogram of Participant Age", x = "Age", y= "number of participants")
theme_minimal() +
labs(title="Hand Looking as a Function of Age and Condition",
x = "Age (years)", y = "Hand looking (seconds)")
ggplot(fvs, aes(x=age, y=hand.look, color = condition)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(fvs, aes(x=age, y=hand.look, color = condition)) +
labs(title="Hand Looking as a Function of Age and Condition",
x = "Age (years)", y = "Hand looking (seconds)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(fvs, aes(x=age, y=hand.look, color = condition)) +
labs(title="Hand Looking as a Function of Age and Condition",
x = "Age (years)", y = "Hand looking (seconds)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(fvs, aes(x=age, y=hand.look, color = condition)) +
labs(title="Hand Looking as a Function of Age and Condition",
x = "Age (years)", y = "Hand looking (seconds)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
theme_minimal() +
scale_color_continuous(palette= "set1")
ggplot(fvs, aes(x=age, y=hand.look, color = condition)) +
labs(title="Hand Looking as a Function of Age and Condition",
x = "Age (years)", y = "Hand looking (seconds)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(fvs, aes(x=age, y=hand.look, color = condition)) +
labs(title="Hand Looking as a Function of Age and Condition",
x = "Age (years)", y = "Hand looking (seconds)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
library(tidyverse)
for(i in 1:10000) {
experiment <- rnorm(30, mean = 0, sd = 1)
t_test <- t.test(experiment, mu = 0)
}
View(t_test)
results_df <- data.frame(experiment_id = integer(0), p_value = numeric(0))
t.sim.results_df <- data.frame(experiment_id = integer(0), p_value = numeric(0))
rm(results_df)
View(t.sim.results_df)
for(i in 1:10000) {
experiment <- rnorm(30, mean = 0, sd = 1)
t_test <- t.test(experiment, mu = 0)
t.sim.prop <- rbind(t.sim.results_df, data.frame(experiment_id = i, p_value = t_test$p.value))
}
View(t.sim.prop)
# Parameters
num_experiments <- 10000
sample_size <- 30
# Vector to store p-values
p_values <- numeric(num_experiments)
# Loop to run the t-tests and store p-values
for(i in 1:num_experiments) {
experiment <- rnorm(sample_size, mean = 0, sd = 1)
t_test <- t.test(experiment, mu = 0)
p_values[i] <- t_test$p.value
}
# Calculate the proportion of significant results
proportion_significant <- mean(p_values < 0.05)
proportion_significant
# Vector to store p-values
p_values <- numeric(10000)
# Loop to run the t-tests and store p-values
for(i in 1:10000) {
experiment <- rnorm(30, mean = 0, sd = 1)
t_test <- t.test(experiment, mu = 0)
p_values[i] <- t_test$p.value
}
# Calculate the proportion of significant results
proportion_significant <- mean(p_values < 0.05)
proportion_significant
# Vector to store p-values
p_values <- numeric(10000)
# Loop to run the t-tests and store p-values
for(i in 1:10000) {
experiment <- rnorm(30, mean = 0, sd = 1)
t_test <- t.test(experiment, mu = 0)
p_values[i] <- t_test$p.value
}
# Calculate the proportion of significant results
proportion_significant <- mean(p_values < 0.05)
proportion_significant
# Vector to store p-values
p_values <- numeric(10000)
# Loop to run the t-tests and store p-values
for(i in 1:10000) {
experiment <- rnorm(30, mean = 0, sd = 1)
t_test <- t.test(experiment, mu = 0)
p_values[i] <- t_test$p.value
}
# Calculate the proportion of significant results
proportion_significant <- mean(p_values < 0.05)
proportion_significant
p_values <- repliacte(10000, {
experiment <- rnorm(30, mean = 0, sd = 1)
t_test <- t.test(experiment, mu = 0)
return(t_test$p.value)
})
p_values <- replicate(10000, {
experiment <- rnorm(30, mean = 0, sd = 1)
t_test <- t.test(experiment, mu = 0)
return(t_test$p.value)
})
mean(p_values <0.05)
mean(p_values)
mean(p_values <0.05)
View(t_test)
double.sample <- function() {
initial_sample_size <- 30
# Sample and conduct the first t-test
initial_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
initial_test <- t.test(initial_sample, mu = 0)
# Decision criteria based on the p-value
if (initial_test$p.value < 0.05) {
# Significant result, stop and report
return(initial_test$p.value)
} else if (initial_test$p.value > 0.25) {
# Not even close to significant, stop and report
return(initial_test$p.value)
} else {
# P-value is in the range [0.05, 0.25], collect more data
additional_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
combined_sample <- c(initial_sample, additional_sample)
combined_test <- t.test(combined_sample, mu = 0)
return(combined_test$p.value)
}
}
View(double.sample)
print(double.sample)
double.sample <- function() {
initial_sample_size <- 30
# Sample and conduct the first t-test
initial_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
initial_test <- t.test(initial_sample, mu = 0)
# Decision criteria based on the p-value
if (initial_test$p.value < 0.05) {
# Significant result, stop and report
return(initial_test$p.value)
} else if (initial_test$p.value > 0.25) {
# Not even close to significant, stop and report
return(initial_test$p.value)
} else {
# P-value is in the range [0.05, 0.25], collect more data
additional_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
combined_sample <- c(initial_sample, additional_sample)
combined_test <- t.test(combined_sample, mu = 0)
return(combined_test$p.value)
}
}
View(double.sample)
function() {
initial_sample_size <- 30
# Sample and conduct the first t-test
initial_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
initial_test <- t.test(initial_sample, mu = 0)
# Decision criteria based on the p-value
if (initial_test$p.value < 0.05) {
# Significant result, stop and report
return(initial_test$p.value)
} else if (initial_test$p.value > 0.25) {
# Not even close to significant, stop and report
return(initial_test$p.value)
} else {
# P-value is in the range [0.05, 0.25], collect more data
additional_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
combined_sample <- c(initial_sample, additional_sample)
combined_test <- t.test(combined_sample, mu = 0)
return(combined_test$p.value)
}
}
double.sample <- function() {
initial_sample_size <- 30
# Sample and conduct the first t-test
initial_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
initial_test <- t.test(initial_sample, mu = 0)
# Decision criteria based on the p-value
if (initial_test$p.value < 0.05) {
# Significant result, stop and report
return(initial_test$p.value)
} else if (initial_test$p.value > 0.25) {
# Not even close to significant, stop and report
return(initial_test$p.value)
} else {
# P-value is in the range [0.05, 0.25], collect more data
additional_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
combined_sample <- c(initial_sample, additional_sample)
combined_test <- t.test(combined_sample, mu = 0)
return(combined_test$p.value)
}
}
result <- double.sample()
print(result)
double.sample()
double.sample()
double.sample()
double.sample()
double.sample()
double.sample()
double.sample()
double.sample()
p_values <- replicate(num_experiments, double.sample())
proportion_significant <- mean(p_values <0.05)
mean(p_values <0.05)
p_values <- replicate(10000, double.sample())
replicate(10000, double.sample())
p_values <- replicate(10000, double.sample())
mean(p_values <0.05)
num_experiments <- 20000  # Increasing the number of experiments for more stable results
# Scenario 1: Upper threshold of 0.5
results_0_5 <- replicate(num_experiments, double.sample(0.5))
proportion_significant_0_5 <- mean(results_0_5 < 0.05)
num_experiments <- 20000
# Scenario 1: Upper threshold of 0.5
results_0_5 <- replicate(num_experiments, double.sample(0.5))
double.sample <- function(upper_threshold) {
initial_sample_size <- 30
# Sample and conduct the first t-test
initial_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
initial_test <- t.test(initial_sample, mu = 0)
# Decision criteria based on the p-value
if (initial_test$p.value < 0.05) {
# Significant result, stop and report
return(initial_test$p.value)
} else if (initial_test$p.value > upper_threshold) {
# Not significant and not close enough, stop and report
return(initial_test$p.value)
} else {
# P-value is not significant but within the threshold, collect more data
additional_sample <- rnorm(initial_sample_size, mean = 0, sd = 1)
combined_sample <- c(initial_sample, additional_sample)
combined_test <- t.test(combined_sample, mu = 0)
return(combined_test$p.value)
}
}
number_experiments <- 20000
results_05 <- replicate(num_experiments, double.sample(0.5))
mean(results_05 <0.05)
#running less than .5
results_05 <- replicate(num_experiments, double.sample(0.5))
mean(results_05 <0.05)
#running less than .5
results0_55 <- replicate(num_experiments, double.sample(0.5))
#running less than .5
results0_55 <- replicate(num_experiments, double.sample(0.5))
mean(results0_5 <0.05)
#running less than .5
results0_5 <- replicate(num_experiments, double.sample(0.5))
#running less than .5
results0_5 <- replicate(num_experiments, double.sample(0.5))
mean(results0_5 <0.05)
results_0_75 <- replicate(num_experiments, double.sample(0.75))
results_0_75 <- replicate(num_experiments, double.sample(0.75))
proportion_significant_0_75 <- mean(results_0_75 < 0.05)
mean(results_0_75 < 0.05)
mean(results0_5 <0.05)
mean(results_0_75 < 0.05)
results_any <- replicate(num_experiments, double.sample(1))
mean(results_any < 0.05)
mean(results_0_75 < 0.05)
mean(results0_5 <0.05)
mean(results_0_75 < 0.05)
mean(results_any < 0.05)
#double experiment number
num_experiments <- 20000
#running less than .5
results0_5 <- replicate(num_experiments, double.sample(0.5))
mean(results0_5 <0.05)
results_0_75 <- replicate(num_experiments, double.sample(0.75))
results_0_75 <- replicate(num_experiments, double.sample(0.75))
mean(results_0_75 < 0.05)
results_any <- replicate(num_experiments, double.sample(1))
mean(results_any < 0.05)
ggplot(fvs, aes(x=age, y=hand.look, color = condition)) +
labs(title="Hand Looking as a Function of Age and Condition",
x = "Age (years)", y = "Hand looking (seconds)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
theme_minimal()
ggplot(fvs, aes(x=age, y=hand.look, color = condition)) +
labs(title="Hand Looking as a Function of Age and Condition",
x = "Age (years)", y = "Hand looking (seconds)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(fvs, aes(x=age, y=hand.look, color = condition)) +
labs(title="Hand Looking as a Function of Age and Condition",
x = "Age (years)", y = "Hand looking (seconds)") +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
